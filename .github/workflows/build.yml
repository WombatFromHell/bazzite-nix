---
name: Build Custom Image
on:
  # push:
  #   branches:
  #     - main
  #   paths-ignore:
  #     - "**/README.md"
  schedule:
    - cron: "0 6 */2 * *" # 06:00 UTC (every other day)
  workflow_dispatch:
    inputs:
      force_build:
        description: "Force build even if digest unchanged"
        required: false
        default: false
        type: boolean

env:
  DEFAULT_TAG: "latest"
  UPSTREAM_IMAGE: "ghcr.io/ublue-os/bazzite:testing-42"
  IMAGE_NAME: "${{ github.event.repository.name }}"
  IMAGE_DESC: "Bazzite Testing image with Nix mount support"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  ARTIFACTHUB_LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4"

concurrency:
  # Ensure only one run per branch/ref at a time
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_upstream_digest:
    name: Check for changes in upstream digest
    runs-on: ubuntu-24.04
    outputs:
      digest_changed: ${{ steps.compare.outputs.changed }}
      current_digest: ${{ steps.get_digest.outputs.digest }}
      should_build: ${{ steps.decide.outputs.should_build }}
    steps:
      - name: Get current digest from GHCR
        id: get_digest
        run: |
          echo "Fetching digest for ${{ env.UPSTREAM_IMAGE }}"
          # Retry logic for network issues
          for i in {1..3}; do
            if DIGEST=$(skopeo inspect docker://${{ env.UPSTREAM_IMAGE }} | jq -r '.Digest'); then
              echo "Successfully fetched digest: $DIGEST"
              echo "digest=$DIGEST" >> $GITHUB_OUTPUT
              break
            else
              echo "Attempt $i failed, retrying in 10 seconds..."
              sleep 10
              if [ $i -eq 3 ]; then
                echo "::error::Failed to fetch digest after 3 attempts"
                exit 1
              fi
            fi
          done

      - name: Generate cache keys
        id: cache_keys
        run: |
          # Use repository and branch for cache key diversity
          REPO_HASH=$(echo "${{ github.repository }}" | sha256sum | cut -c1-8)
          BRANCH_HASH=$(echo "${{ github.ref_name }}" | sha256sum | cut -c1-8)
          # Different cache strategies based on trigger
          if [ "${{ github.event_name }}" == "schedule" ]; then
            # For scheduled runs: persistent cache (no date rotation)
            PRIMARY_KEY="digest-cache-${REPO_HASH}-${BRANCH_HASH}"
            echo "Using persistent cache for scheduled build"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # For manual runs: allow cache bypass with date if needed
            if [ "${{ github.event.inputs.force_build }}" == "true" ]; then
              DATE_KEY=$(date +%Y%m%d%H%M)  # Include time for unique key
              PRIMARY_KEY="digest-cache-${REPO_HASH}-${BRANCH_HASH}-force-${DATE_KEY}"
              echo "Using force cache key for manual build"
            else
              PRIMARY_KEY="digest-cache-${REPO_HASH}-${BRANCH_HASH}"
              echo "Using persistent cache for manual build"
            fi
          else
            # For other triggers (push, PR): use persistent cache
            PRIMARY_KEY="digest-cache-${REPO_HASH}-${BRANCH_HASH}"
            echo "Using persistent cache for ${{ github.event_name }} trigger"
          fi
          # Fallback keys for cache restoration (properly formatted)
          FALLBACK_KEYS="digest-cache-${REPO_HASH}"
          echo "primary_key=$PRIMARY_KEY" >> $GITHUB_OUTPUT
          # Use proper multi-line format for GitHub Actions output
          echo "fallback_keys<<EOF" >> $GITHUB_OUTPUT
          echo "$FALLBACK_KEYS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Cache keys generated:"
          echo "  Primary: $PRIMARY_KEY"
          echo "  Fallbacks: $FALLBACK_KEYS"

      - name: Restore digest cache
        id: restore_cache
        uses: actions/cache/restore@v4
        with:
          path: .digest-cache
          key: ${{ steps.cache_keys.outputs.primary_key }}
          restore-keys: ${{ steps.cache_keys.outputs.fallback_keys }}

      - name: Check cache restoration
        id: cache_status
        run: |
          CACHE_HIT="${{ steps.restore_cache.outputs.cache-hit }}"
          CACHE_KEY="${{ steps.restore_cache.outputs.cache-matched-key }}"
          if [ "$CACHE_HIT" == "true" ]; then
            echo "Cache hit with key: $CACHE_KEY"
            echo "cache_available=true" >> $GITHUB_OUTPUT
          else
            echo "Cache miss, will perform full comparison"
            echo "cache_available=false" >> $GITHUB_OUTPUT
          fi
          # List cache contents for debugging
          echo "Cache directory contents:"
          ls -la .digest-cache/ || echo "Cache directory is empty"

      - name: Compare digests
        id: compare
        run: |
          CURRENT_DIGEST="${{ steps.get_digest.outputs.digest }}"
          CHANGED="false"
          REASON=""
          # Check if this is a forced build
          if [ "${{ github.event.inputs.force_build }}" == "true" ]; then
            CHANGED="true"
            REASON="Force build requested"
          elif [ ! -f .digest-cache/last_digest ]; then
            # No previous digest found (first run or cache evicted)
            CHANGED="true"
            REASON="No previous digest found (first run or cache evicted)"
          else
            # Compare with previous digest
            LAST_DIGEST=$(cat .digest-cache/last_digest)
            echo "Current digest:  $CURRENT_DIGEST"
            echo "Previous digest: $LAST_DIGEST"
            if [ "$CURRENT_DIGEST" != "$LAST_DIGEST" ]; then
              CHANGED="true"
              REASON="Digest changed from $LAST_DIGEST to $CURRENT_DIGEST"
            else
              CHANGED="false"
              REASON="Digest unchanged: $CURRENT_DIGEST"
            fi
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT
          echo "reason=$REASON" >> $GITHUB_OUTPUT
          echo "Comparison result: $CHANGED"
          echo "Reason: $REASON"

      - name: Update digest cache
        run: |
          mkdir -p .digest-cache
          echo "${{ steps.get_digest.outputs.digest }}" > .digest-cache/last_digest
          echo "Updated digest cache with: ${{ steps.get_digest.outputs.digest }}"

      - name: Save digest cache
        uses: actions/cache/save@v4
        with:
          path: .digest-cache
          key: ${{ steps.cache_keys.outputs.primary_key }}

      - name: Final build decision
        id: decide
        run: |
          SHOULD_BUILD="${{ steps.compare.outputs.changed }}"
          echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          if [ "$SHOULD_BUILD" == "true" ]; then
            echo "Build will proceed: ${{ steps.compare.outputs.reason }}"
          else
            echo "Build will be skipped: ${{ steps.compare.outputs.reason }}"
          fi

  build_push:
    name: Build and push image
    needs: check_upstream_digest
    if: needs.check_upstream_digest.outputs.should_build == 'true'
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        # variant: ["", "-deck"]
        variant: [""]
        include:
          - variant: ""
            containerfile: "Containerfile"
            image_suffix: ""
          # - variant: "-deck"
          #   containerfile: "Containerfile.deck"
          #   image_suffix: "-deck"

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set timestamps
        id: date
        run: |
          echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          echo "short_date=$(date -u +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Extract parent version
        id: parent_tag
        run: |
          BASE=$(grep '^FROM ' ${{ matrix.containerfile }} \
            | grep -v ' AS ' \
            | grep -v '^FROM scratch' \
            | head -n1 \
            | awk '{print $2}')
          if [ -z "$BASE" ]; then
            echo "::error::No valid FROM found in ${{ matrix.containerfile }}" && exit 1
          fi
          if [ "$BASE" = "scratch" ]; then
            echo "parent_version=$DEFAULT_TAG" >> $GITHUB_OUTPUT && exit 0
          fi
          skopeo inspect docker://$BASE \
            | jq -r '.Labels["org.opencontainers.image.version"]' \
            > version.txt
          VER=$(cat version.txt)
          if [[ -z "$VER" || "$VER" == "latest" ]]; then
            echo "::error::Invalid upstream version label: $VER" && exit 1
          fi
          echo "parent_version=$VER" >> $GITHUB_OUTPUT

      - name: Login for Skopeo
        run: echo "${{ secrets.GITHUB_TOKEN }}" \
          | skopeo login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Skip if unchanged
        id: version_check
        run: |
          EXIST=$(skopeo inspect --format '{{ index .Labels "org.opencontainers.image.version" }}' \
            docker://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest 2>/dev/null || echo "")
          [[ "$EXIST" == "${{ steps.parent_tag.outputs.parent_version }}" ]] \
            && echo "skip_build=true" >> $GITHUB_OUTPUT && exit 0
          echo "skip_build=false" >> $GITHUB_OUTPUT

      - name: Build image
        if: steps.version_check.outputs.skip_build != 'true'
        id: build_image
        run: |
          # Builds image in root store as root, to be picked up by Rechunker
          sudo buildah build \
            --tag "raw-img" \
            --file ./${{ matrix.containerfile }}

      - name: Lowercase Registry and Image
        id: lowercase
        run: |
          REGISTRY_LOWER=$(echo "${{ env.IMAGE_REGISTRY }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_LOWER=$(echo "${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}" | tr '[:upper:]' '[:lower:]')
          echo "registry_lower=${REGISTRY_LOWER}" >> $GITHUB_OUTPUT
          echo "image_lower=${IMAGE_LOWER}" >> $GITHUB_OUTPUT

      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@ded27feba22df48134eece2c66ba0fca1289ff40 # v1.2.3
        if: steps.version_check.outputs.skip_build != 'true'
        with:
          rechunk: "ghcr.io/hhd-dev/rechunk:v1.2.3"
          ref: "raw-img"
          prev-ref: "${{ steps.lowercase.outputs.registry_lower }}/${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:${{ env.DEFAULT_TAG }}"
          skip_compression: true
          max-layers: 100
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/refs/heads/main/README.md
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/blob/main/${{ matrix.containerfile }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.parent_tag.outputs.parent_version }}
            io.artifacthub.package.logo-url=${{ env.ARTIFACTHUB_LOGO_URL }}
            containers.bootc=1

      - name: Push To GHCR
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        if: steps.version_check.outputs.skip_build != 'true'
        id: push
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            FULL_DIGEST=$(sudo skopeo inspect --format '{{.Digest}}' ${{ steps.rechunk.outputs.ref }})
            DIGEST=$(echo "$FULL_DIGEST" | sed 's/sha256://')
            echo "Rechunk digest is: $DIGEST"
            echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
            tags=(
              latest
              ${{ steps.parent_tag.outputs.parent_version }}
              $DIGEST
            )
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin
            # Use Skopeo to upload 'latest' tag first
            BASE_IMG="docker://${{ steps.lowercase.outputs.registry_lower }}/${{ env.IMAGE_NAME }}"
            sudo skopeo copy ${{ steps.rechunk.outputs.ref }} ${BASE_IMG}:${tags[0]}
            # Then copy from the target to apply aliases
            for tag in "${tags[@]:1}"; do
              sudo skopeo copy ${BASE_IMG}:${tags[0]} ${BASE_IMG}:${tag}
            done

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.1
        if: steps.version_check.outputs.skip_build != 'true'

      - name: Sign container image
        if: steps.version_check.outputs.skip_build != 'true'
        run: |
          IMAGE_DIGEST="${{ steps.push.outputs.digest }}"
          IMAGE_REGISTRY="${{ steps.lowercase.outputs.registry_lower }}"
          IMAGE_NAME="${{ steps.lowercase.outputs.image_lower }}"
          echo "Signing image: ${IMAGE_REGISTRY}/${IMAGE_NAME}@${IMAGE_DIGEST}"
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${IMAGE_REGISTRY}/${IMAGE_NAME}@${IMAGE_DIGEST}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
