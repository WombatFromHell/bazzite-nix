---
name: Build Custom Image
on:
  # pull_request:
  #   branches:
  #     - main
  # schedule:
  #   - cron: "0 0 * * 0" # 00:00 UTC every Sunday
  # push:
  #   branches:
  #     - main
  #   paths-ignore:
  #     - "**/README.md"
  workflow_dispatch:

env:
  DEFAULT_TAG: "latest"
  IMAGE_NAME: "${{ github.event.repository.name }}"
  IMAGE_DESC: "Bazzite Testing image with Nix mount support"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  ARTIFACTHUB_LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.stream_name }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        # variant: ["", "-deck"]
        variant: [""]
        include:
          - variant: ""
            containerfile: "Containerfile"
            image_suffix: ""
          # - variant: "-deck"
          #   containerfile: "Containerfile.deck"
          #   image_suffix: "-deck"

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set timestamps
        id: date
        run: |
          echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          echo "short_date=$(date -u +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Extract parent version
        id: parent_tag
        run: |
          BASE=$(grep '^FROM ' ${{ matrix.containerfile }} \
            | grep -v ' AS ' \
            | grep -v '^FROM scratch' \
            | head -n1 \
            | awk '{print $2}')
          if [ -z "$BASE" ]; then
            echo "::error::No valid FROM found in ${{ matrix.containerfile }}" && exit 1
          fi
          if [ "$BASE" = "scratch" ]; then
            echo "parent_version=$DEFAULT_TAG" >> $GITHUB_OUTPUT && exit 0
          fi
          skopeo inspect docker://$BASE \
            | jq -r '.Labels["org.opencontainers.image.version"]' \
            > version.txt
          VER=$(cat version.txt)
          if [[ -z "$VER" || "$VER" == "latest" ]]; then
            echo "::error::Invalid upstream version label: $VER" && exit 1
          fi
          echo "parent_version=$VER" >> $GITHUB_OUTPUT

      - name: Login for Skopeo
        run: echo "${{ secrets.GITHUB_TOKEN }}" \
          | skopeo login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Skip if unchanged
        id: version_check
        run: |
          EXIST=$(skopeo inspect --format '{{ index .Labels "org.opencontainers.image.version" }}' \
            docker://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest 2>/dev/null || echo "")
          [[ "$EXIST" == "${{ steps.parent_tag.outputs.parent_version }}" ]] \
            && echo "skip_build=true" >> $GITHUB_OUTPUT && exit 0
          echo "skip_build=false" >> $GITHUB_OUTPUT

      - name: Set metadata
        if: steps.version_check.outputs.skip_build != 'true'
        uses: docker/metadata-action@v5.7.0
        id: metadata
        with:
          tags: |
            raw,${{ steps.parent_tag.outputs.parent_version }}
            raw,${{ steps.date.outputs.short_date }}
            raw,latest
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/refs/heads/main/README.md
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/blob/main/${{ matrix.containerfile }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.parent_tag.outputs.parent_version }}
            io.artifacthub.package.logo-url=${{ env.ARTIFACTHUB_LOGO_URL }}
            containers.bootc=1

      - name: Build image
        if: steps.version_check.outputs.skip_build != 'true'
        id: build_image
        run: |
          # Builds image in root store as root, to be picked up by Rechunker
          sudo buildah bud \
            --format docker \
            --tag "localhost/${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:${{ env.DEFAULT_TAG }}" \
            --file ./${{ matrix.containerfile }}

      - name: Remove source images
        run: |
          images=$(sudo podman images -n --sort repository --format '{{.ID}} {{.Repository}}' | grep -v localhost | awk '{print $1}')
          if [ -n "${images}" ]; then
            for image in ${images}; do
              echo "Removing image: $image"
              sudo podman rmi --force "$image"
            done
          else
            echo "No images to remove."
          fi

      - name: Lowercase Registry and Image
        if: steps.version_check.outputs.skip_build != 'true'
        id: lowercase
        run: |
          REGISTRY_LOWER=$(echo "${{ env.IMAGE_REGISTRY }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_LOWER=$(echo "${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}" | tr '[:upper:]' '[:lower:]')
          echo "registry_lower=${REGISTRY_LOWER}" >> $GITHUB_OUTPUT
          echo "image_lower=${IMAGE_LOWER}" >> $GITHUB_OUTPUT

      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@ca77507401f8700bb0b25ebecbbf980a078cd180 # v1.2.2
        with:
          rechunk: "ghcr.io/hhd-dev/rechunk:v1.2.2"
          ref: "localhost/${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:${{ env.DEFAULT_TAG }}"
          prev-ref: "${{ steps.lowercase.outputs.registry_lower }}/${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:${{ env.DEFAULT_TAG }}"
          skip_compression: false
          max-layers: 100
          labels: ${{ steps.metadata.outputs.labels }} # Rechunk strips out all the labels during build, this needs to be reapplied here with newline separator

      - name: Rechunk output
        run: |
          if [[ "${STEPS_RECHUNK_CONCLUSION}" == "success" ]]; then
            echo "${STEPS_RECHUNK_OUTPUTS_CHANGELOG}"
            echo "${STEPS_RECHUNK_OUTPUTS_MANIFEST}"
            cat "${STEPS_RECHUNK_OUTPUTS_CHANGELOG}"
            cat "${STEPS_RECHUNK_OUTPUTS_MANIFEST}"

          else
            echo "Rechunk conclusion:"
            echo "${STEPS_RECHUNK_CONCLUSION}"
          fi
        env:
          STEPS_RECHUNK_CONCLUSION: ${{ steps.rechunk.conclusion }}
          STEPS_RECHUNK_OUTPUTS_CHANGELOG: ${{ steps.rechunk.outputs.changelog }}
          STEPS_RECHUNK_OUTPUTS_MANIFEST: ${{ steps.rechunk.outputs.manifest }}

      - name: Remove Rechunker image
        run: |
          image=$(sudo podman images -n --sort repository --format '{{.ID}} {{.Repository}}' | grep rechunk | awk '{print $1}')
          if [ -n "${image}" ]; then
            sudo podman rmi --force "$image"
          else
            echo "No image to remove"
          fi

      - name: Load in podman and tag
        run: |
          IMAGE=$(podman pull ${STEPS_RECHUNK_OUTPUTS_REF})
          sudo rm -rf ${STEPS_RECHUNK_OUTPUTS_LOCATION}
          for tag in ${STEPS_METADATA_OUTPUTS_TAGS}; do
            podman tag $IMAGE ${IMAGE_NAME}:$tag
          done
        env:
          STEPS_RECHUNK_OUTPUTS_REF: ${{ steps.rechunk.outputs.ref }}
          STEPS_RECHUNK_OUTPUTS_LOCATION: ${{ steps.rechunk.outputs.location }}
          STEPS_METADATA_OUTPUTS_TAGS: ${{ steps.metadata.outputs.tags }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2.8
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          registry: ${{ steps.lowercase.outputs.registry_lower }}
          image: ${{ steps.lowercase.outputs.image_lower }}
          tags: ${{ steps.metadata.outputs.tags }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --compression-format=gzip
            --compression-level=9

      - name: Tag with SHA256 Digest
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        id: digest_tag
        run: |
          FULL_DIGEST="${{ steps.push.outputs.digest }}"
          SHA256_HASH=$(echo "$FULL_DIGEST" | sed 's/sha256://')
          REGISTRY_LOWER="${{ steps.lowercase.outputs.registry_lower }}"
          IMAGE_LOWER="${{ steps.lowercase.outputs.image_lower }}"
          skopeo copy \
            docker://${REGISTRY_LOWER}/${IMAGE_LOWER}@${FULL_DIGEST} \
            docker://${REGISTRY_LOWER}/${IMAGE_LOWER}:${SHA256_HASH}
          echo "Successfully tagged and pushed image with SHA256 digest: ${REGISTRY_LOWER}/${IMAGE_LOWER}:${SHA256_HASH}"
          echo "sha256_tag=${SHA256_HASH}" >> $GITHUB_OUTPUT

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.1
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

      - name: Sign container image
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          # Use the digest from the push step output instead of tags
          IMAGE_DIGEST="${{ steps.push.outputs.digest }}"
          IMAGE_REGISTRY="${{ steps.lowercase.outputs.registry_lower }}"
          IMAGE_NAME="${{ steps.lowercase.outputs.image_lower }}"
          echo "Signing image: ${IMAGE_REGISTRY}/${IMAGE_NAME}@${IMAGE_DIGEST}"
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${IMAGE_REGISTRY}/${IMAGE_NAME}@${IMAGE_DIGEST}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
