---
name: Build Custom Image
on:
  # pull_request:
  #   branches:
  #     - main
  # schedule:
  #   - cron: "0 0 * * 0" # 00:00 UTC every Sunday
  # push:
  #   branches:
  #     - main
  #   paths-ignore:
  #     - "**/README.md"
  workflow_dispatch:

env:
  DEFAULT_TAG: "latest"
  IMAGE_NAME: "${{ github.event.repository.name }}"
  IMAGE_DESC: "Bazzite Testing image with Nix mount support"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  ARTIFACTHUB_LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.stream_name }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        # variant: ["", "-deck"]
        variant: [""]
        include:
          - variant: ""
            containerfile: "Containerfile"
            image_suffix: ""
          # - variant: "-deck"
          #   containerfile: "Containerfile.deck"
          #   image_suffix: "-deck"

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Get current UTC timestamp
        id: date
        run: |
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT
          echo "short_date=$(date -u +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Extract upstream version from parent image
        id: parent_tag
        run: |
          echo "=== DEBUG: Containerfile content ==="
          cat ${{ matrix.containerfile }}
          echo "=================================="

          # Find the main base image (not build stages like "FROM scratch AS ctx")
          # Look for FROM lines that don't have "AS <stage_name>" and aren't scratch
          FROM=$(grep '^FROM ' ${{ matrix.containerfile }} | grep -v ' AS ' | grep -v '^FROM scratch' | head -n1 | awk '{print $2}')
          grep '^FROM ' ${{ matrix.containerfile }} || echo "No FROM lines found"
          grep '^FROM ' ${{ matrix.containerfile }} | grep -v ' AS ' || echo "No FROM lines without AS found"
          grep '^FROM ' ${{ matrix.containerfile }} | grep -v ' AS ' | grep -v '^FROM scratch' || echo "No valid FROM lines found"

          if [ -z "$FROM" ]; then
            echo "::error::Failed to find a valid base image FROM line in Containerfile"
            echo "::error::Looking for FROM lines that are not build stages (no AS clause) and not scratch"
            exit 1
          fi
          if [ "$FROM" = "scratch" ]; then
            echo "Parent is scratch â†’ no upstream version to extract, defaulting to DEFAULT_TAG"
            echo "parent_version=${{ env.DEFAULT_TAG }}" >> $GITHUB_OUTPUT
            echo "upstream_tag=latest" >> $GITHUB_OUTPUT
            echo "is_scratch=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "is_scratch=false" >> $GITHUB_OUTPUT

          # Get the version label from the parent image
          UPSTREAM_VERSION=$(skopeo inspect docker://$FROM \
                           | jq -r '.Labels["org.opencontainers.image.version"] // empty')
          echo "Upstream version label: '$UPSTREAM_VERSION'"

          if [ -z "$UPSTREAM_VERSION" ]; then
            echo "::error::Failed to get org.opencontainers.image.version label from $FROM"
            echo "::error::This is required for proper versioning. The upstream image must have this label."
            exit 1
          fi

          if [ "$UPSTREAM_VERSION" = "latest" ]; then
            echo "::error::Upstream version label is 'latest' which is not a valid version"
            echo "::error::Expected a version like 'testing-42.20250619.5' from $FROM"
            exit 1
          fi

          # Use the version label as our upstream tag
          echo "upstream_tag=$UPSTREAM_VERSION" >> $GITHUB_OUTPUT
          echo "parent_version=$UPSTREAM_VERSION" >> $GITHUB_OUTPUT

      - name: Login to GHCR (for inspection)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" \
            | skopeo login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Bail if upstream hasn't changed
        run: |
          EXISTING=$(skopeo inspect \
            --format='{{ index .Labels "org.opencontainers.image.version" }}' \
            docker://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:latest 2>/dev/null || echo "")
          echo "Existing latest has version: $EXISTING"
          echo "New upstream version: ${{ steps.parent_tag.outputs.parent_version }}"

          if [ -n "$EXISTING" ] && [ "$EXISTING" = "${{ steps.parent_tag.outputs.parent_version }}" ]; then
            echo "::notice::No new upstream version detected ($EXISTING). Skipping build."
            echo "skip_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "skip_build=false" >> $GITHUB_OUTPUT
        id: version_check

      - name: Update Containerfile with versioned upstream
        if: steps.version_check.outputs.skip_build != 'true' && steps.parent_tag.outputs.is_scratch != 'true'
        run: |
          # Find the main base image line (not build stages)
          ORIGINAL_FROM_LINE=$(grep '^FROM ' ${{ matrix.containerfile }} | grep -v ' AS ' | grep -v '^FROM scratch' | head -n1)
          BASE_IMAGE=$(echo "$ORIGINAL_FROM_LINE" | awk '{print $2}' | sed 's/:.*//')
          UPSTREAM_TAG="${{ steps.parent_tag.outputs.upstream_tag }}"
          # Replace only the main base image FROM line, not the build stage ones
          sed "s|^FROM ${BASE_IMAGE}.*$|FROM ${BASE_IMAGE}:${UPSTREAM_TAG}|" ${{ matrix.containerfile }} > ${{ matrix.containerfile }}.tmp
          mv ${{ matrix.containerfile }}.tmp ${{ matrix.containerfile }}
          grep '^FROM ' ${{ matrix.containerfile }}

      - name: Image Metadata
        if: steps.version_check.outputs.skip_build != 'true'
        uses: docker/metadata-action@v5.7.0
        id: metadata
        with:
          tags: |
            type=raw,value=${{ steps.parent_tag.outputs.parent_version }}
            type=raw,value=${{ steps.date.outputs.short_date }}
            type=raw,value=latest
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/blob/main/${{ matrix.containerfile }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.parent_tag.outputs.parent_version }}
            io.artifacthub.package.deprecated=false
            io.artifacthub.package.keywords=bootc,ublue,universal-blue
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.logo-url=${{ env.ARTIFACTHUB_LOGO_URL }}
            io.artifacthub.package.prerelease=false
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      - name: Build OCI Image with Podman
        if: steps.version_check.outputs.skip_build != 'true'
        id: build_image
        run: |
          set -euo pipefail

          # Build the image using podman with OCI format
          echo "Building image with podman..."

          # Prepare label arguments
          LABEL_ARGS=""
          LABELS="${{ steps.metadata.outputs.labels }}"
          if [[ -n "$LABELS" ]]; then
            while IFS= read -r label; do
              if [[ -n "$label" ]]; then
                LABEL_ARGS="$LABEL_ARGS --label \"$label\""
              fi
            done <<< "$LABELS"
          fi

          # Build the image
          eval "podman build \
            --format oci \
            --file ${{ matrix.containerfile }} \
            --tag ${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:${{ env.DEFAULT_TAG }} \
            $LABEL_ARGS \
            ."

          echo "Image built successfully"

          # Verify the image was created
          if ! podman image exists "${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:${{ env.DEFAULT_TAG }}"; then
            echo "::error::Built image not found in local storage"
            exit 1
          fi

          # Get the full image ID for rechunker
          IMAGE_ID=$(podman image inspect "${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:${{ env.DEFAULT_TAG }}" --format='{{.Id}}')
          echo "image_id=$IMAGE_ID" >> $GITHUB_OUTPUT

          echo "=== Built image details ==="
          echo "Image ID: $IMAGE_ID"
          podman images | grep "${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}" || echo "Image not found in listing"
          echo "=========================="

      - name: Run Rechunker
        if: steps.version_check.outputs.skip_build != 'true'
        id: rechunk
        uses: hhd-dev/rechunk@v1.2.2
        with:
          rechunk: "ghcr.io/hhd-dev/rechunk:v1.2.2"
          ref: "${{ steps.build_image.outputs.image_id }}"
          prev-ref: "${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:${{ env.DEFAULT_TAG }}"
          skip_compression: true
          version: ${{ steps.parent_tag.outputs.parent_version }}
          labels: ${{ steps.metadata.outputs.labels }}

      - name: Load rechunked image and tag
        if: steps.version_check.outputs.skip_build != 'true'
        run: |
          set -euo pipefail
          RECHUNKED_REF="${{ steps.rechunk.outputs.ref }}"
          echo "Rechunked image reference: $RECHUNKED_REF"
          if [[ -z "$RECHUNKED_REF" ]]; then
            echo "::error::Rechunk output ref is empty"
            exit 1
          fi
          echo "=== Available images in podman storage ==="
          podman images
          echo "=========================================="
          IMAGE="$RECHUNKED_REF"
          if ! podman image exists "$IMAGE"; then
            echo "::error::Rechunked image $IMAGE not found in local storage"
            echo "::error::Available images:"
            podman images
            exit 1
          fi
          echo "Successfully found rechunked image: $IMAGE"
          # Tag the image with all metadata tags
          TAGS="${{ steps.metadata.outputs.tags }}"
          if [[ -n "$TAGS" ]]; then
            echo "Tagging image with tags: $TAGS"
            for tag in $TAGS; do
              podman tag "$IMAGE" "${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:$tag"
            done
          else
            echo "::warning::No tags found in metadata output"
          fi
          echo "=== Final tagged images ==="
          podman images | grep "${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}" || echo "No tagged images found"
          echo "============================"
          # Safely cleanup rechunk output after successful tagging
          if [[ -n "${{ steps.rechunk.outputs.output }}" ]] && [[ -d "${{ steps.rechunk.outputs.output }}" ]]; then
            echo "Cleaning up rechunk output directory: ${{ steps.rechunk.outputs.output }}"
            rm -rf "${{ steps.rechunk.outputs.output }}"
          fi

      - name: Login to GitHub Container Registry
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Lowercase Registry and Image
        if: steps.version_check.outputs.skip_build != 'true'
        id: lowercase
        run: |
          REGISTRY_LOWER=$(echo "${{ env.IMAGE_REGISTRY }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_LOWER=$(echo "${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}" | tr '[:upper:]' '[:lower:]')
          echo "registry_lower=${REGISTRY_LOWER}" >> $GITHUB_OUTPUT
          echo "image_lower=${IMAGE_LOWER}" >> $GITHUB_OUTPUT

      - name: Push To GHCR with Podman
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        id: push
        run: |
          set -euo pipefail

          REGISTRY_LOWER="${{ steps.lowercase.outputs.registry_lower }}"
          IMAGE_LOWER="${{ steps.lowercase.outputs.image_lower }}"
          TAGS="${{ steps.metadata.outputs.tags }}"

          echo "Pushing images to registry..."

          # Push each tag and capture the digest from the first push
          DIGEST=""
          for tag in $TAGS; do
            echo "Pushing: ${REGISTRY_LOWER}/${IMAGE_LOWER}:${tag}"
            PUSH_OUTPUT=$(podman push "${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:${tag}" "${REGISTRY_LOWER}/${IMAGE_LOWER}:${tag}" 2>&1)
            echo "$PUSH_OUTPUT"
            
            # Extract digest from the first push (all tags point to the same image)
            if [[ -z "$DIGEST" ]]; then
              DIGEST=$(echo "$PUSH_OUTPUT" | grep -o 'sha256:[a-f0-9]\{64\}' | head -n1 || echo "")
            fi
          done

          if [[ -z "$DIGEST" ]]; then
            echo "::error::Failed to extract digest from push output"
            exit 1
          fi

          echo "Successfully pushed with digest: $DIGEST"
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Tag with SHA256 Digest
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        id: digest_tag
        run: |
          FULL_DIGEST="${{ steps.push.outputs.digest }}"
          echo "Full digest: $FULL_DIGEST"
          SHA256_HASH=$(echo "$FULL_DIGEST" | sed 's/sha256://')
          echo "SHA256 hash: $SHA256_HASH"
          REGISTRY_LOWER="${{ steps.lowercase.outputs.registry_lower }}"
          IMAGE_LOWER="${{ steps.lowercase.outputs.image_lower }}"
          echo "Tagging image with SHA256 digest: $SHA256_HASH"
          skopeo copy \
            docker://${REGISTRY_LOWER}/${IMAGE_LOWER}@${FULL_DIGEST} \
            docker://${REGISTRY_LOWER}/${IMAGE_LOWER}:${SHA256_HASH}

          echo "Successfully tagged and pushed image with SHA256 digest: ${REGISTRY_LOWER}/${IMAGE_LOWER}:${SHA256_HASH}"
          echo "sha256_tag=${SHA256_HASH}" >> $GITHUB_OUTPUT

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.1
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

      - name: Sign container image
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          # Use the digest from the push step output instead of tags
          IMAGE_DIGEST="${{ steps.push.outputs.digest }}"
          IMAGE_REGISTRY="${{ steps.lowercase.outputs.registry_lower }}"
          IMAGE_NAME="${{ steps.lowercase.outputs.image_lower }}"

          echo "Signing image: ${IMAGE_REGISTRY}/${IMAGE_NAME}@${IMAGE_DIGEST}"
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${IMAGE_REGISTRY}/${IMAGE_NAME}@${IMAGE_DIGEST}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
