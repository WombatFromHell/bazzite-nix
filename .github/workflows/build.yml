---
name: Build Custom Image
on:
  # pull_request:
  #   branches:
  #     - main
  # schedule:
  #   - cron: "0 0 * * 0" # 00:00 UTC every Sunday
  # push:
  #   branches:
  #     - main
  #   paths-ignore:
  #     - "**/README.md"
  workflow_dispatch:

env:
  DEFAULT_TAG: "latest"
  IMAGE_NAME: "${{ github.event.repository.name }}"
  IMAGE_DESC: "Bazzite Testing image with Nix mount support"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  ARTIFACTHUB_LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.stream_name }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        # variant: ["", "-deck"]
        variant: [""]
        include:
          - variant: ""
            containerfile: "Containerfile"
            image_suffix: ""
          # - variant: "-deck"
          #   containerfile: "Containerfile.deck"
          #   image_suffix: "-deck"

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get current UTC timestamp
        id: date
        run: |
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      - name: Extract upstream version from parent image
        id: parent_tag
        run: |
          FROM=$(grep -m1 '^FROM ' ${{ matrix.containerfile }} | awk '{print $2}')
          echo "Parent image: $FROM"

          if [ "$FROM" = "scratch" ]; then
            echo "Parent is scratch â†’ no upstream version to extract, defaulting to DEFAULT_TAG"
            echo "parent_version=${{ env.DEFAULT_TAG }}" >> $GITHUB_OUTPUT
            echo "upstream_tag=latest" >> $GITHUB_OUTPUT
            echo "is_scratch=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "is_scratch=false" >> $GITHUB_OUTPUT

          # Get the version label from the parent image
          UPSTREAM_VERSION=$(skopeo inspect docker://$FROM \
                           | jq -r '.Labels["org.opencontainers.image.version"] // empty')
          echo "Upstream version label: $UPSTREAM_VERSION"

          if [ -z "$UPSTREAM_VERSION" ] || [ "$UPSTREAM_VERSION" = "latest" ]; then
            echo "Warning: couldn't find a version label on $FROM, using tag from FROM line"
            # Extract tag from FROM line as fallback
            UPSTREAM_TAG=$(echo "$FROM" | sed 's/.*://')
            echo "upstream_tag=$UPSTREAM_TAG" >> $GITHUB_OUTPUT
            echo "parent_version=$UPSTREAM_TAG" >> $GITHUB_OUTPUT
          else
            # Use the version label as our upstream tag
            echo "upstream_tag=$UPSTREAM_VERSION" >> $GITHUB_OUTPUT
            echo "parent_version=$UPSTREAM_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Login to GHCR (for inspection)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" \
            | skopeo login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Bail if upstream hasn't changed
        run: |
          EXISTING=$(skopeo inspect \
            --format='{{ index .Labels "org.opencontainers.image.version" }}' \
            docker://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest 2>/dev/null || echo "")
          echo "Existing latest has version: $EXISTING"
          echo "New upstream version: ${{ steps.parent_tag.outputs.parent_version }}"

          if [ -n "$EXISTING" ] && [ "$EXISTING" = "${{ steps.parent_tag.outputs.parent_version }}" ]; then
            echo "::notice::No new upstream version detected ($EXISTING). Skipping build."
            echo "skip_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "skip_build=false" >> $GITHUB_OUTPUT
        id: version_check

      - name: Update Containerfile with versioned upstream
        if: steps.version_check.outputs.skip_build != 'true' && steps.parent_tag.outputs.is_scratch != 'true'
        run: |
          # Get the base image without tag
          BASE_IMAGE=$(grep -m1 '^FROM ' ${{ matrix.containerfile }} | awk '{print $2}' | sed 's/:.*//')
          UPSTREAM_TAG="${{ steps.parent_tag.outputs.upstream_tag }}"

          echo "Updating Containerfile to use: ${BASE_IMAGE}:${UPSTREAM_TAG}"

          # Create a temporary Containerfile with the versioned tag
          sed "s|^FROM .*|FROM ${BASE_IMAGE}:${UPSTREAM_TAG}|" ${{ matrix.containerfile }} > ${{ matrix.containerfile }}.tmp
          mv ${{ matrix.containerfile }}.tmp ${{ matrix.containerfile }}

          echo "Updated FROM line:"
          head -n 1 ${{ matrix.containerfile }}

      - name: Image Metadata
        if: steps.version_check.outputs.skip_build != 'true'
        uses: docker/metadata-action@v5.7.0
        id: metadata
        with:
          tags: |
            type=raw,value=${{ steps.parent_tag.outputs.parent_version }}
            type=raw,value=latest
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/blob/main/${{ matrix.containerfile }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.parent_tag.outputs.parent_version }}
            io.artifacthub.package.deprecated=false
            io.artifacthub.package.keywords=bootc,ublue,universal-blue
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.logo-url=${{ env.ARTIFACTHUB_LOGO_URL }}
            io.artifacthub.package.prerelease=false
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      - name: Build Image
        if: steps.version_check.outputs.skip_build != 'true'
        id: build_image
        uses: redhat-actions/buildah-build@v2.13
        with:
          containerfiles: ./${{ matrix.containerfile }}
          image: ${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          oci: false

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase Registry and Image
        if: steps.version_check.outputs.skip_build != 'true'
        id: lowercase
        run: |
          REGISTRY_LOWER=$(echo "${{ env.IMAGE_REGISTRY }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_LOWER=$(echo "${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}" | tr '[:upper:]' '[:lower:]')
          echo "registry_lower=${REGISTRY_LOWER}" >> $GITHUB_OUTPUT
          echo "image_lower=${IMAGE_LOWER}" >> $GITHUB_OUTPUT

      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2.8
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          registry: ${{ steps.lowercase.outputs.registry_lower }}
          image: ${{ steps.lowercase.outputs.image_lower }}
          tags: ${{ steps.metadata.outputs.tags }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.0
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

      - name: Sign container image
        if: steps.version_check.outputs.skip_build != 'true' && github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          # Use the digest from the push step output instead of tags
          IMAGE_DIGEST="${{ steps.push.outputs.digest }}"
          IMAGE_REGISTRY="${{ steps.lowercase.outputs.registry_lower }}"
          IMAGE_NAME="${{ steps.lowercase.outputs.image_lower }}"

          echo "Signing image: ${IMAGE_REGISTRY}/${IMAGE_NAME}@${IMAGE_DIGEST}"
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${IMAGE_REGISTRY}/${IMAGE_NAME}@${IMAGE_DIGEST}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
