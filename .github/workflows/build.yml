---
name: Build Custom Image
on:
  # push:
  #   branches:
  #     - main
  #   paths-ignore:
  #     - "**/README.md"
  schedule:
    - cron: "1 6 * * 3,6" # 06:01 UTC (every Wednesday/Saturday)
  workflow_dispatch:
    inputs:
      force_build:
        description: "Force build even if digest unchanged"
        required: false
        default: false
        type: boolean
      skip_rechunk:
        description: "Skip rechunk step (faster build, larger layers)"
        required: false
        default: false
        type: boolean

env:
  DEFAULT_TAG: "latest"
  IMAGE_NAME: "${{ github.event.repository.name }}"
  IMAGE_DESC: "Bazzite Testing image with Nix mount support"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  PULL_IMAGE_REGISTRY: "ghcr.io/ublue-os"
  ARTIFACTHUB_LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4"

concurrency:
  # Ensure only one run per branch/ref at a time
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - variant: ""
            containerfile: "Containerfile"
            base_image: "bazzite:testing-42"
          - variant: "-stable"
            containerfile: "Containerfile.stable"
            base_image: "bazzite:stable-42"
          # - variant: "-deck"
          #   containerfile: "Containerfile.deck"
          #   base_image: "bazzite-deck:testing-42"

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Mount BTRFS for podman storage
        uses: ublue-os/container-storage-action@main
        with:
          target-dir: /var/lib/containers

      - name: Set timestamps
        id: date
        run: |
          echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Generate cache keys
        id: cache_keys
        shell: bash
        run: |
          # one‑time hashes
          REPO_HASH=$(echo "${{ github.repository }}"  | sha256sum | cut -c1-8)
          BRANCH_HASH=$(echo "${{ github.ref_name }}" | sha256sum | cut -c1-8)
          #
          # base key is always persistent
          BASE_KEY="digest-cache-${REPO_HASH}-${BRANCH_HASH}"
          #
          # if this is a forced manual run, add a timestamp suffix
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && \
            [[ "${{ github.event.inputs.force_build }}" == "true" ]]; then
            BASE_KEY="${BASE_KEY}-force-$(date +%Y%m%d%H%M)"
            echo "Forcing a fresh cache key: $BASE_KEY"
          else
            echo "Using persistent cache key: $BASE_KEY"
          fi
          # emit outputs
          echo "primary_key=$BASE_KEY" >> $GITHUB_OUTPUT
          echo "fallback_keys=digest-cache-${REPO_HASH}" >> $GITHUB_OUTPUT

      - name: Restore digest cache
        id: restore_cache
        uses: actions/cache/restore@v4
        with:
          path: .digest-cache
          key: ${{ steps.cache_keys.outputs.primary_key }}
          restore-keys: |
            ${{ steps.cache_keys.outputs.fallback_keys }}

      - name: Check cache restoration
        id: cache_status
        run: |
          CACHE_HIT="${{ steps.restore_cache.outputs.cache-hit }}"
          CACHE_KEY="${{ steps.restore_cache.outputs.cache-matched-key }}"
          if [ "$CACHE_HIT" == "true" ]; then
            echo "Cache hit with key: $CACHE_KEY"
            echo "cache_available=true" >> $GITHUB_OUTPUT
          else
            echo "Cache miss, will perform full comparison"
            echo "cache_available=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata from upstream image
        id: metadata
        run: |
          BASE=$(grep '^FROM ' ./${{ matrix.containerfile }} \
            | grep -v ' AS ' \
            | grep -v '^FROM scratch' \
            | head -n1 \
            | awk '{print $2}')
          if [ -z "$BASE" ]; then
            echo "::error::No valid FROM found in ${{ matrix.containerfile }}" && exit 1
          fi

          for i in {1..3}; do
            if INSPECT=$(skopeo inspect docker://$BASE); then
              VER=$(echo "$INSPECT" | jq -r '.Labels["org.opencontainers.image.version"]')
              DIGEST=$(echo "$INSPECT" | jq -r '.Digest')

              if [[ -z "$VER" || "$VER" == "latest" ]]; then
                echo "::error::Invalid or missing upstream version label: $VER"
                exit 1
              fi
              if [[ -z "$DIGEST" ]]; then
                echo "::error::Unable to fetch digest: $DIGEST"
                exit 1
              fi
            else
              echo "Attempt $i failed, retrying in 10 seconds..."
              sleep 10
              if [ $i -eq 3 ]; then
                echo "::error::Failed inspection fetch after 3 attempts"
                exit 1
              fi
            fi
          done
          echo "base_image=$BASE" >> $GITHUB_OUTPUT
          echo "parent_version=$VER" >> $GITHUB_OUTPUT
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Compare digests
        id: compare
        run: |
          CURRENT_DIGEST="${{ steps.metadata.outputs.digest }}"
          CHANGED="false"
          REASON=""
          # Check if this is a forced build
          if [ "${{ github.event.inputs.force_build }}" == "true" ]; then
            CHANGED="true"
            REASON="Force build requested"
          elif [ ! -f .digest-cache/last_digest ]; then
            # No previous digest found (first run or cache evicted)
            CHANGED="true"
            REASON="No previous digest found (first run or cache evicted)"
          else
            # Compare with previous digest
            LAST_DIGEST=$(cat .digest-cache/last_digest)
            echo "Current digest:  $CURRENT_DIGEST"
            echo "Previous digest: $LAST_DIGEST"
            if [ "$CURRENT_DIGEST" != "$LAST_DIGEST" ]; then
              CHANGED="true"
              REASON="Digest changed from $LAST_DIGEST to $CURRENT_DIGEST"
            else
              CHANGED="false"
              REASON="Digest unchanged: $CURRENT_DIGEST"
            fi
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT
          echo "reason=$REASON" >> $GITHUB_OUTPUT
          echo "Comparison result: $CHANGED"
          echo "Reason: $REASON"

      - name: Build decision
        id: decide
        run: |
          if [ "${{ steps.compare.outputs.changed }}" == "true" ]; then
            echo "Build proceeding: ${{ steps.compare.outputs.reason }}..."
          else
            echo "::warning::Build skipped - no changes detected"
            echo "## ⚠️ Build Skipped" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** ${{ steps.compare.outputs.reason }}" >> $GITHUB_STEP_SUMMARY
            echo "**Current digest:** \`${{ steps.metadata.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Login for Skopeo
        run: echo "${{ secrets.GITHUB_TOKEN }}" \
          | skopeo login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Lowercase Registry and Image
        id: lowercase
        run: |
          REGISTRY_LOWER=$(echo "${{ env.IMAGE_REGISTRY }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_LOWER=$(echo "${{ env.IMAGE_NAME }}${{ matrix.variant }}" | tr '[:upper:]' '[:lower:]')
          echo "registry_lower=${REGISTRY_LOWER}" >> $GITHUB_OUTPUT
          echo "image_lower=${IMAGE_LOWER}" >> $GITHUB_OUTPUT

      - name: Assemble image labels
        id: labels
        run: |
          # Assemble all labels in one place for reuse
          LABELS=$(cat <<EOF
          io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/refs/heads/main/README.md
          org.opencontainers.image.created=${{ steps.date.outputs.date }}
          org.opencontainers.image.description=${{ env.IMAGE_DESC }}
          org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/refs/heads/main/README.md
          org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/blob/main/${{ matrix.containerfile }}
          org.opencontainers.image.title=${{ steps.lowercase.outputs.image_lower }}
          org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.version=${{ steps.metadata.outputs.parent_version }}
          io.artifacthub.package.logo-url=${{ env.ARTIFACTHUB_LOGO_URL }}
          containers.bootc=1
          EOF
          )

          # Export as multiline output for rechunk step
          echo "rechunk_labels<<EOF" >> $GITHUB_OUTPUT
          echo "$LABELS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Export as buildah args for build step
          BUILDAH_ARGS=""
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              BUILDAH_ARGS="$BUILDAH_ARGS --label \"$line\""
            fi
          done <<< "$LABELS"

          echo "buildah_args<<EOF" >> $GITHUB_OUTPUT
          echo "$BUILDAH_ARGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build image
        id: build_image
        run: |
          if [ "${{ github.event.inputs.skip_rechunk }}" != "true" ]; then
            # Build with labels when not using rechunk
            sudo buildah build --tag localhost/raw-img ${{ steps.labels.outputs.buildah_args }} --file ./${{ matrix.containerfile }} && \
              echo "skopeo_ref=containers-storage:localhost/raw-img" >> $GITHUB_OUTPUT
          else
            # Build without labels when using rechunk (rechunk will add them)
            sudo buildah build --tag raw-img --file ./${{ matrix.containerfile }}
          fi

      - name: Remove pulled auxiliary images
        run: |
          sudo podman image rm ${{ env.PULL_IMAGE_REGISTRY }}/${{ matrix.base_image }}

      - name: Run Rechunker
        id: rechunk
        if: github.event.inputs.skip_rechunk != true
        uses: hhd-dev/rechunk@ded27feba22df48134eece2c66ba0fca1289ff40 # v1.2.3
        with:
          rechunk: "ghcr.io/hhd-dev/rechunk:v1.2.3"
          ref: "raw-img"
          prev-ref: "${{ steps.lowercase.outputs.registry_lower }}/${{ steps.lowercase.outputs.image_lower }}:${{ env.DEFAULT_TAG }}"
          max-layers: 100
          labels: ${{ steps.labels.outputs.rechunk_labels }}

      - name: Get build digest
        id: build_digest
        run: |
          if [ "${{ github.event.inputs.skip_rechunk }}" == "true" ]; then
            IMAGE_REF="${{ steps.build_image.outputs.skopeo_ref }}"
          else
            IMAGE_REF="${{ steps.rechunk.outputs.ref }}"
          fi
          FULL_BUILD_DIGEST=$(sudo skopeo inspect --format '{{.Digest}}' ${IMAGE_REF})
          BUILD_DIGEST=$(echo "$FULL_BUILD_DIGEST" | sed 's/sha256://')
          echo "full_build_digest=${FULL_BUILD_DIGEST}" >> $GITHUB_OUTPUT
          echo "build_digest=${BUILD_DIGEST}" >> $GITHUB_OUTPUT

      - name: Push To GHCR
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        id: push
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            tags=(
              latest
              ${{ steps.metadata.outputs.parent_version }}
              ${{ steps.build_digest.outputs.build_digest }}
            )
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin

            # Determine source image reference
            if [ "${{ github.event.inputs.skip_rechunk }}" == "true" ]; then
              SOURCE_REF="${{ steps.build_image.outputs.skopeo_ref }}"
            else
              SOURCE_REF="${{ steps.rechunk.outputs.ref }}"
            fi

            # Use Skopeo to upload 'latest' tag first
            BASE_IMG="docker://${{ steps.lowercase.outputs.registry_lower }}/${{ steps.lowercase.outputs.image_lower }}"
            sudo skopeo copy ${SOURCE_REF} ${BASE_IMG}:${tags[0]}
            # Then copy from the target to apply aliases
            for tag in "${tags[@]:1}"; do
              sudo skopeo copy ${BASE_IMG}:${tags[0]} ${BASE_IMG}:${tag}
            done

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.2

      - name: Sign container image
        run: |
          IMAGE_DIGEST="${{ steps.build_digest.outputs.full_build_digest }}"
          IMAGE_REGISTRY="${{ steps.lowercase.outputs.registry_lower }}"
          IMAGE_NAME="${{ steps.lowercase.outputs.image_lower }}"
          echo "Signing image: ${IMAGE_REGISTRY}/${IMAGE_NAME}@${IMAGE_DIGEST}"

          # Login to GHCR for cosign
          echo "${{ secrets.GITHUB_TOKEN }}" | cosign login ghcr.io -u ${{ github.actor }} --password-stdin

          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${IMAGE_REGISTRY}/${IMAGE_NAME}@${IMAGE_DIGEST}
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
